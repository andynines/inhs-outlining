Voronoi diagrams

What does each feature vector mean, how do we best distinguish them?
Leave-one-out cross validation on all potential methods
How accurate can we get?
Keep sample sizes equal.
Explore the other knobs too, like neighborhood size.

Need to do a signal encoding and reconstruction, then assert it's correct and visualize it.
There's multiple encoding possibilities now; one that's Freeman style and one that's based on Fourier descriptors

for non-complex outlines (like what we use to compute features in the traditional function and not complex_features) we can use np.rfft which should be faster

PARAMETERS THAT (COULD) AFFECT DATA LEARNABILITY:
Number of largest frequencies extracted (AKA number of features). This is tied to reconstruction accuracy.
	We'll ignore use of negative frequency terms for now
Number of classes, granularity of classes (genus, genus-species), and size of classes
Classifier type (fix as KNN for now)
Which features used (Breen features or Fourier descriptors)
Neighborhood type (4 or 8)
Scaling interpolation method
Spatial/image resolution / Target normalization scale
Std dev thresholding multiplier

Biggest magnitude numbers are most important
Compare error rates between trans with ten biggest versus all thousand and see difference
And look at error rate between trans and og function

cross validate to explore all these.

need to understand the transform results better - do some reading here

HIDDEN MARKOV MODELS FOR RECOGNIZING COMMON CONTOURS? Handwriting recognition parallel

Note that I zoomed out of the detectron segmentations by 10 px on each side.

Alternatively, a level set evolution with a velocity proportional to distances?
As a boundary pixel, look at your non-boundary, non-interior neighbors. "exterior", background pixel
If this distance is below a certain threshold, then the exterior pixel becomes the new boundary
A more iterative process based on an initial guess
Oh, and we'd also want to look at interior neighbors because you could be over-segmenting

To compute curvature on a chain code, hit it with a gaussian filter to blur it, turn it into grayscale, and then compute iso line curvatures on that grayscale image using preexisting formulas
Fourier analysis on the results? Look at what are the coefficients for different frequencies of chain codes; becomes a signal processing problem
What's the right spatial resolution where there's distinguishing qualities of the fish's curvature?
Discontinuities in curvature at e.g. the tip of a shark's back fin
Potential feature: distance between extremal points
1. extracting outline
2. computing curvature -> initial "signal" that we could use
https://arxiv.org/pdf/1407.7340.pdf
https://math.mit.edu/classes/18.086/2007/levelsetnotes.pdf

key phrase: level set method / level set curvature
equation 4 in his given paper to compute curvatures of gaussian-blurred version of jagged binary image

We have the segmentation boundary so at any point we know in what general direction "out" is

Notion of uniform tension of a string wrapped around the fish
Breen looked into something like it a long time ago (see paper) but probably overcomplex
https://ieeexplore.ieee.org/document/146367

Otsu maximally separates in V dimension of HSV
Adding more dimensionality gives the ML algo more to work with

So far in ML ready data processing: removed a couple bad synonym eggs (maybe don't mention that) and several one-worders. Rest are all good.
I also dropped a bunch who lacked a "side" value because detectron couldn't find their ruler or something.
The remaining boys are going to be slimmed down even further by which ones have detectable fish and a well-fitting bounding box.

Consider taking parts of the outline encoding as separate features, like first 10 chars, second 10 chars, etc.
Define some sort of difference operation between encodings to find differences?

Also lit review!

